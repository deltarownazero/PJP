//1. Dla poniższych definicji list:
//def list1 = [ 'a', 'b', 'c']
//def list2 = [ 1, 8, 23 ]

//za pomocą metody each(Closure)
//a) wypisać wszystkie elementy (2 p.),
//b) stworzyć nowe listy list11 i list12 zawierające podwojone wartości list oryginalnych (3 p.).

def list1 = [ 'a', 'b', 'c']
def list2 = [ 1, 8, 23 ]

list1.each {println(it)}
list2.each {println(it)}

def list11 = []
def list21 = []

list1.each {list11.add(it+it)}
println(list11)
list2.each {list21.add(it+it)}
println(list21)

//2. Firma software'owa prowadzi projekty w:
//Groovy, Grails, Java, JEE
//Do każdego projektu przypisani są programiści, co pokazuje poniższa mapa:
def pmap = [ Groovy: [ 'Asia', 'Jan' ],
             Grails: [ 'Asia', 'Jan', 'Stefan', 'Mirek' ],
             Java: [ 'Asia', 'Stefan', 'Mirek' ],
             JEE: [ 'Slawek', 'Stefan', 'Janusz' ]
]
//Wypisać:
//a) ile osób pracuje w każdym z projektów  (3 p)
pmap.each {println("$it.key ${it.value.size()}")}
//b) projekty, które mają więcej niż dwóch programistów (3p )
pmap.each {if(it.value.size()>2) println(it.key)}
//c)  w jakich projektach biorą udzial poszczególni programisci (6 p.)
def imie = 'Mirek'
pmap.each {if(it.value.contains(imie))println(it.key)}

//Daty w tekście maja postać YYYY-MM-DD (rok- miesiac- dzien). Wypisać wszystkie poprawne daty.
//czyli: po wyróżnieniu wszystkich fragmentów, które mogą być datami sprawdzić ich poprawność
// (np. czy właściwa jest liczba dni w miesiącu)

def text = 'blabla 1111-11-11 bla 2222-22-22'
def regex = '[0-9]{4}-[0-9]{2}-[0-9]{2}'
def matcher = text =~ regex
show(text, matcher)

def show(txt, m) {
    for(match in m){
        def year = (match[0] as int )*1000 + (match[1]as int) *100 + (match[2]as int) * 10 + (match[3] as int)
        def month = (match[5]as int) * 10 + (match[6] as int)
        def day = (match[8]as int) * 10 + (match[9] as int)
        //println(year)
        //println(month)
        //println(day)
        if(year<2021 && month < 13 && day < 32)
        println(match)
    }
}
